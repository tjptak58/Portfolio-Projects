--------------------------------------------------------Chapter 1 What is NodeJS--------------------------------------------------------

Open source backend used by many major companies
    - Framework for end-to-end JS applications
    - Full stack dev a sought out skill set

What is Node JS? 
    - Cross platform, open source, JS runtime environment.
      ECMA international: industry association that standardizes IT and comms systems.
    - JS built on top of ECMAscript
    - Allows us to run JS outside of a browser

JS engine:
    - JS code can't be understood by the computer. A js enging converts JS code
      that developers write into machine code that allows a computer to perform tasks.
    - All browsers have one. Chrome (V8)
    - V8 is written in C++ and is used in google Chrome
    - By embedding V8 into your own C++ application, you can write C++ code
      that gets executed when a user writes JS code
    - NodeJS is a C++ program embedded with V8 that can run Javascript code
    - NodeJS can run JS and add additional features like file handling
      networking, and databases

Javascript runtime
    - Environment that provides all the neccesary components to run a JS program
    - JS Code -> V8 Engine -> Web/Browser API -> Queue -> Event Loop
    - Engine: has a callstack (executes code) and a heap (store memory)
    - API: DOM, Storage, Timer
    - Queue: where async tasks wait
    - Event loop: makes sure async tasks run in correct order
    You need more than an engine to run JS. 

What can you build with NodeJS:
    - Websites
    - Backend services like APIs
    - Real-time applications
    - CLI tools
    - Streaming services

LEVELS: https://github.com/nodejs/node

JS Library
    - lib: has js code to access C++ features + utility functions
             
C++ features
    - src: has C++ source for core features

Dependencies
    - V8: The Chrome v8 engine (understands js code)
    - uv: Access to low level OS tools like network and scheduling
    - zlib: 
    - crypto
    - etc


--------------------------------------------------------Chapter 2 Modules--------------------------------------------------------

Modules:
    - encapuslated and reusable chunks of code with its own context
    - Each file is treated as its own Modules

Local Modules: Modes we create in our application
    - Common JS: standard for how a module should be structured and shared
